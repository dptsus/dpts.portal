@using DPTS.Web.Models
@model SearchModel
<div class="tg-searcharea-v2">
@using (Html.BeginForm("Search", "Home", FormMethod.Get, new { id = "directory-map", @class = "tg-searchform directory-map" }))
{
    <fieldset>
        <div class="form-group">
            <input type="text" name="keyword" id="keyword" class="form-control" placeholder="Type Keyword...">
        </div>
        <div class="form-group">
            <div class="locate-me-wrap">
                <div class="locate-me-wrap">
                    <div id="location-pickr-map" class="elm-display-none"></div>
                    <input type="text" autocomplete="on" id="location-address" value="" name="geo_location" placeholder="Geo location" class="form-control">
                    <a href="javascript:;" class="geolocate"><img src="~/Content/wp-content/themes/docdirect/images/geoicon.svg" width="16" height="16" class="geo-locate-me" alt="Locate me!"></a>
                    <a href="javascript:;" class="geodistance"><i class="fa fa-angle-down" aria-hidden="true"></i></a>
                    <div class="geodistance_range elm-display-none">
                        <div class="distance-ml">Distance in&nbsp;( Miles )<span>50</span></div>
                        <input type="hidden" name="geo_distance" value="50" class="geo_distance" />
                        <div class="geo_distance" id="geo_distance"></div>
                    </div>
                </div>
                <script>
			jQuery(document).ready(function(e) {
				jQuery( "#geo_distance" ).slider({
				   range: "min",
				   min:1,
				   max:300,
				   value:50,
				   animate:"slow",
				   orientation: "horizontal",
				   slide: function( event, ui ) {
					  jQuery( ".distance-ml span" ).html( ui.value );
					  jQuery( ".geo_distance" ).val( ui.value );
				   }
				});
			});
                </script>
                @*<script>
                    jQuery(document).ready(function(e) {
                        //init
                        jQuery.docdirect_init_map(51.5001524,-0.1262362);
                    });
                                                </script>*@
                <script>
                    function initMap() {
                        //var input = document.getElementById('location-address');
                        // Create the search box and link it to the UI element.
                        var input = document.getElementById('location-address');
                        var searchBox = new google.maps.places.SearchBox(input);
                        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

                        // Bias the SearchBox results towards current map's viewport.
                        map.addListener('bounds_changed', function() {
                            searchBox.setBounds(map.getBounds());
                        });

                        var markers = [];
                        // Listen for the event fired when the user selects a prediction and retrieve
                        // more details for that place.
                        searchBox.addListener('places_changed', function() {
                            var places = searchBox.getPlaces();

                            if (places.length == 0) {
                                return;
                            }

                            // Clear out the old markers.
                            markers.forEach(function(marker) {
                                marker.setMap(null);
                            });
                            markers = [];

                            // For each place, get the icon, name and location.
                            var bounds = new google.maps.LatLngBounds();
                            places.forEach(function(place) {
                                if (!place.geometry) {
                                    console.log("Returned place contains no geometry");
                                    return;
                                }
                                var icon = {
                                    url: place.icon,
                                    size: new google.maps.Size(71, 71),
                                    origin: new google.maps.Point(0, 0),
                                    anchor: new google.maps.Point(17, 34),
                                    scaledSize: new google.maps.Size(25, 25)
                                };

                                // Create a marker for each place.
                                markers.push(new google.maps.Marker({
                                    map: map,
                                    icon: icon,
                                    title: place.name,
                                    position: place.geometry.location
                                }));

                                if (place.geometry.viewport) {
                                    // Only geocodes have viewport.
                                    bounds.union(place.geometry.viewport);
                                } else {
                                    bounds.extend(place.geometry.location);
                                }
                            });
                            map.fitBounds(bounds);
                        });
}
                       // createMapSearchBox();
          navigator.geolocation.getCurrentPosition(function (pos) {
              var geocoder = new google.maps.Geocoder();
              var lat = pos.coords.latitude;
              var lng = pos.coords.longitude;
              var latlng = new google.maps.LatLng(lat, lng);

              //reverse geocode the coordinates, returning location information.
              geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                  var result = results[0];
                  var postalCode = '';

                  for (var i = 0, len = result.address_components.length; i < len; i++) {
                      var ac = result.address_components[i];

                      if (ac.types.indexOf('postal_code') >= 0) {
                          postalCode = ac.short_name;
                      }
                  }

                  //$('#location-address').val(postalCode);
                  if(postalCode != '')
                  {
                      $('.geo-locate-me').css('visibility', 'visible');
                  }
              });
          });
                </script>
                <script async defer
                        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDvanm9mpt0gdHXeUTLbmedVCYU8OKNS3U&libraries=places&callback=initMap">
                </script>
            </div>
        </div>
        <div class="form-group">
            <span class="select">
                <select class="directory_type" name="directory_type">
                    <option value="">All</option>
                    <option id="127" data-dir_name="Doctor" value="doctor">Doctor</option>
                </select>
            </span>
        </div>
        <div class="form-group">
            <span class="select">
                @Html.DropDownListFor(model => model.SpecialityId, Model.AvailableSpeciality, new { @class = "group subcats" })
            </span>
        </div>
        <div class="form-group">
            <input type="submit" id="search_banner" class="tg-btn" value="search">
        </div>
    </fieldset>
}
</div>
